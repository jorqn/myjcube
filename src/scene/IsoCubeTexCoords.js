define("scene/IsoCubeTexCoords", ["cube/CubeTexCoords"], function(CubeTexCoords) {
    "use strict";
    var IsoCubeTexCoords = new CubeTexCoords();
    var center = new THREE.Vector2(0.5, 0.5);
    var up = new THREE.Vector2(0, 0.5/3);
    var down = new THREE.Vector2(0, -0.5/3);
    var diagUp = new THREE.Vector2(0.5*Math.sin(Math.PI/3)/3, 0.5/6);
    var diagDown = new THREE.Vector2(0.5*Math.sin(Math.PI/3)/3, -0.5/6);
    var v = center.clone();
    v.sub(diagDown);
    v.sub(diagDown);
    v.sub(diagDown);
    IsoCubeTexCoords.addFace('up', { origin: v, u: diagDown, v: diagUp });
    v = center.clone();
    v.sub(diagDown);
    v.sub(diagDown);
    v.sub(diagDown);
    v.sub(up);
    v.sub(up);
    v.sub(up);
    IsoCubeTexCoords.addFace('front', { origin: v, u: diagDown, v: up });
    v = center.clone();
    v.sub(up);
    v.sub(up);
    v.sub(up);
    IsoCubeTexCoords.addFace('right', { origin: v, u: diagUp, v: up });
    v = center.clone();
    var minusDiagDown = diagDown.clone();
    minusDiagDown.multiplyScalar(-1);
    IsoCubeTexCoords.addFace('down', { origin: v, u: diagUp, v: minusDiagDown });
    IsoCubeTexCoords.addFace('left', { origin: v, u: minusDiagDown, v: down });
    v = center.clone();
    v.sub(up);
    v.sub(up);
    v.sub(up);
    IsoCubeTexCoords.addFace('back', { origin: v, u: diagUp, v: up });
    return IsoCubeTexCoords;
});
